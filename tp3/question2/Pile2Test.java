package question2;

/**
 * Classe-test Pile2Test.
 * 
 * @author (votre nom)
 * @version (un num√©ro de version ou une date)
 * 
 *          Les classes-test sont document√©es ici :
 *          http://junit.sourceforge.net/javadoc/junit/framework/TestCase.html
 *          et sont bas√©es sur le document ¬© 2002 Robert A. Ballance intitul√©
 *          ¬´JUnit: Unit Testing Framework¬ª.
 * 
 *          Les objets Test (et TestSuite) sont associ√©s aux classes √† tester
 *          par la simple relation yyyTest (e.g. qu'un Test de la classe
 *          Name.java se nommera NameTest.java); les deux se retrouvent dans le
 *          m√™me paquetage. Les "engagements" (anglais : "fixture") forment un
 *          ensemble de conditions qui sont vraies pour chaque m√©thode Test √†
 *          ex√©cuter. Il peut y avoir plus d'une m√©thode Test dans une classe
 *          Test; leur ensemble forme un objet TestSuite. BlueJ d√©couvrira
 *          automatiquement (par introspection) les m√©thodes Test de votre
 *          classe Test et g√©n√©rera la TestSuite cons√©quente. Chaque appel d'une
 *          m√©thode Test sera pr√©c√©d√© d'un appel de setUp(), qui r√©alise les
 *          engagements, et suivi d'un appel √† tearDown(), qui les d√©truit.
 */
public class Pile2Test extends junit.framework.TestCase {
    // D√©finissez ici les variables d'instance n√©cessaires √† vos engagements;
    // Vous pouvez √©galement les saisir automatiquement du pr√©sentoir
    // √† l'aide du menu contextuel "Pr√©sentoir --> Engagements".
    // Notez cependant que ce dernier ne peut saisir les objets primitifs
    // du pr√©sentoir (les objets sans constructeur, comme int, float, etc.).

    /**
     * Constructeur de la classe-test Pile2Test
     */
    private PileI p1;
    private PileI p2;
    
    public Pile2Test() {
    }

    /**
     * Met en place les engagements.
     * 
     * M√©thode appel√©e avant chaque appel de m√©thode de test.
     */
    protected void setUp() // throws java.lang.Exception
    {
        // Initialisez ici vos engagements
        p1 = new question2.Pile2();
        p2 = new question2.Pile2();
    }

    /**
     * Supprime les engagements
     * 
     * M√©thode appel√©e apr√®s chaque appel de m√©thode de test.
     */
    protected void tearDown() // throws java.lang.Exception
    {
        // Lib√©rez ici les ressources engag√©es par setUp()
    }

    /**
     * Il ne vous reste plus qu'√† d√©finir une ou plusieurs m√©thodes de test. Ces
     * m√©thodes doivent v√©rifier les r√©sultats attendus √† l'aide d'assertions
     * assertTrue(<boolean>). Par convention, leurs noms devraient d√©buter par
     * "test". Vous pouvez √©baucher le corps gr√¢ce au menu contextuel
     * "Enregistrer une m√©thode de test".
     */
    
    
    public void test_Pile_capacite() {
        assertEquals(PileI.CAPACITE_PAR_DEFAUT, p1.capacite());
    }
        public void testestPleine() throws Exception {
        PileI p = new question2.Pile2(3);
        p.empiler(3);
        assertEquals(10, p.taille());
        p.empiler(2);
        assertEquals(7, p.taille());
        p.empiler(1);
        assertEquals(3, p.taille());

        assertEquals(true, p.estPleine());
        assertEquals(p.taille(), p.capacite());
        try {
            p.empiler(0);
            fail("La pile est pleine !");
        } catch (Exception e) {
            assertTrue(e instanceof question1.PilePleineException);
        }
    }

    public void testestVide() throws Exception {
        PileI p = new question2.Pile2(3);
        assertEquals(true, p.estVide());
        try {
            Object r = p.depiler();
            fail("La pile est vide !");
        } catch (Exception e) {
            assertTrue(e instanceof question1.PileVideException);
        }
    }
        public void testequals() throws Exception {

        p1.empiler(20);
        p1.empiler(11);
        p1.empiler(100);

        p2.empiler(20);
        p2.empiler(11);
        p2.empiler(100);

        assertTrue("ÈgalitÈ de deux piles ? ", p1.equals(p2));
        assertTrue("ÈgalitÈ de deux piles ? ", p2.equals(p1));
       
        p2.empiler(1);
        assertFalse("ÈgalitÈ de deux piles ? ", p1.equals(p2));
        
        p1.empiler(1);
        assertTrue("ÈgalitÈ de deux piles ? ", p2.equals(p1));
        
        p1.depiler();
        assertFalse("ÈgalitÈ de deux piles ? ", p1.equals(p2));

    }

}
